package com.karvinok.composemovies.ui.screen

import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.Icon
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.ArrowBack
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.modifier.modifierLocalProvider
import androidx.compose.ui.unit.dp
import com.karvinok.composemovies.ui.viewModel.MainViewModel
import com.karvinok.data.entity.Movie
import org.koin.androidx.compose.getViewModel

@Composable
fun MoviesScreen(
    viewModel: MainViewModel = getViewModel(),
) {
    val movies = viewModel.moviesState.collectAsState()

    Column(
        modifier = Modifier.fillMaxWidth()
    ) {
        Spacer(modifier = Modifier.height(16.dp))
        TopBar(
            title = "Title",
            onBackClicked = viewModel::onBackClicked
        )
        MoviesListColumn(movies = movies.value.map {
            it.title
        })

    }
}

@Composable
fun TopBar(
    title: String,
    modifier: Modifier = Modifier,
    onBackClicked: () -> Unit,
) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = modifier.height(55.dp)
    ) {
        Spacer(modifier = Modifier.width(32.dp))
        RoundIcon(
            imageVector = Icons.Rounded.ArrowBack,
            backBlock = onBackClicked
        )
        Spacer(modifier = Modifier
            .fillMaxWidth()
            .weight(1f))
        Spacer(modifier = Modifier.width(32.dp))
    }
}

@Composable
fun MoviesListColumn(
    modifier: Modifier = Modifier,
    movies: List<String>
) {
    LazyColumn(modifier = modifier) {
        items(movies.size) { i ->
            MySimpleListItem(movies[i])
        }
    }
}
// The UI for each list item can be generated by a reusable composable
@Composable
fun MySimpleListItem(movie: String) {
    Text(text = movie,
        Modifier
            .clickable {

            }
            .fillMaxWidth())
}


@Composable
fun RoundIcon(
    imageVector: ImageVector,
    backBlock: () -> Unit
) {
    Icon(
        imageVector = imageVector,
        contentDescription = "Back",
        tint = Color.White,
        modifier = Modifier.clickable(
            interactionSource = remember { MutableInteractionSource() },
            indication = rememberRipple(
                bounded = false,
            ),
            onClick = backBlock
        )
    )
}